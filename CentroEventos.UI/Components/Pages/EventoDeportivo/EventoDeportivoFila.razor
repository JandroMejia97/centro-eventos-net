@using CentroEventos.Aplicacion.Entidades

<td>@Dato.Nombre</td>
<td>@Dato.Descripcion</td>
<td class="text-center">@Dato.FechaHoraInicio.ToString("g")</td>
<td class="text-center">@Dato.DuracionHoras</td>
<td>
    @if (Dato.Responsable is null)
    {
        <span class="text-muted">ID: @Dato.ResponsableId</span>
    }
    else
    {
        @Dato.Responsable?.NombreCompleto
    }
</td>
<td class="text-center">
    <span class="badge @ClaseEstado">@EstadoEvento</span>
</td>
<td class="text-center">@Dato.CupoMaximo</td>
<td class="text-center">
    <span class="badge @ObtenerClaseCupoDisponible()">@Dato.CupoDisponible</span>
</td>
<td class="text-center">@Dato.NumeroReservas</td>
<td style="width: 230px;">
    <a class="btn btn-outline-primary btn-sm" href="/eventos/@Dato.Id/reservas">Reservas</a>
    <a class="btn btn-outline-secondary btn-sm" href="/eventos/@Dato.Id">Editar</a>
    <button class="btn btn-outline-danger btn-sm" @onclick="() => SolicitarEliminacion.InvokeAsync(Dato)">Eliminar</button>
</td>

@code {
    [Parameter, EditorRequired]
    public EventoDeportivo Dato { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<EventoDeportivo> SolicitarEliminacion { get; set; }
    private string EstadoEvento = string.Empty;
    private string ClaseEstado = string.Empty;
    protected override void OnInitialized()
    {
        EstadoEvento = ObtenerEstadoEvento(Dato);
        ClaseEstado = ObtenerClaseEstado();
    }

    private string ObtenerEstadoEvento(EventoDeportivo evento)
    {
        var ahora = DateTime.Now;
        var inicio = evento.FechaHoraInicio;
        var fin = inicio.AddHours(evento.DuracionHoras);
        if (ahora < inicio)
            return "Próximo";
        if (ahora >= inicio && ahora <= fin)
            return "En curso";
        return "Finalizado";
    }

    private string ObtenerClaseEstado()
    {
        switch (EstadoEvento)
        {
            case "Próximo":
                return "bg-info text-dark";
            case "En curso":
                return "bg-success";
            case "Finalizado":
                return "bg-secondary";
            default:
                return "bg-light";
        }
    }

    private string ObtenerClaseCupoDisponible()
    {
        var cupoDisponible = Dato.CupoDisponible;
        var porcentajeDisponible = (double)cupoDisponible / Dato.CupoMaximo * 100;
        
        if (cupoDisponible <= 0)
            return "bg-danger";
        else if (porcentajeDisponible <= 20)
            return "bg-warning text-dark";
        else if (porcentajeDisponible <= 50)
            return "bg-info text-dark";
        else
            return "bg-success";
    }
}