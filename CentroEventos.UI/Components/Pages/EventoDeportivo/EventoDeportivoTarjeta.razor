@using CentroEventos.Aplicacion.Entidades

<div class="card h-100 shadow-sm">
    <div class="card-body d-flex flex-column">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="card-title mb-0 text-wrap">@Dato.Nombre</h5>
            <span class="badge @ClaseEstado">@EstadoEvento</span>
        </div>
        <h6 class="card-subtitle mb-2 text-muted">@Dato.FechaHoraInicio.ToString("g")</h6>
        <p class="card-text flex-grow-1">@Dato.Descripcion</p>
        <ul class="list-unstyled mb-2">
            <li><strong>Duraci칩n:</strong> @Dato.DuracionHoras h</li>
            <li><strong>Cupo m치ximo:</strong> @Dato.CupoMaximo</li>
            <li><strong>Reservas:</strong> @Dato.NumeroReservas</li>
            <li><strong>Cupo disponible:</strong> 
                <span class="badge @ObtenerClaseCupoDisponible()">@Dato.CupoDisponible</span>
            </li>
            <li><strong>Responsable:</strong>
                @if (Dato.Responsable is null)
                {
                    <span class="text-muted">@Dato.ResponsableId</span>
                }
                else
                {
                    @Dato.Responsable?.NombreCompleto
                }
            </li>
        </ul>
        <div class="d-flex gap-2 mt-auto">
            <a class="btn btn-outline-secondary btn-sm" href="/eventos/@Dato.Id">Editar</a>
            <button class="btn btn-outline-danger btn-sm" @onclick="() => SolicitarEliminacion.InvokeAsync(Dato)">Eliminar</button>
        </div>
    </div>
</div>
@code {
    [Parameter, EditorRequired]
    public EventoDeportivo Dato { get; set; } = default!;
    [Parameter, EditorRequired]
    public EventCallback<EventoDeportivo> SolicitarEliminacion { get; set; }
    private string EstadoEvento = string.Empty;
    private string ClaseEstado = string.Empty;
    protected override void OnInitialized()
    {
        EstadoEvento = ObtenerEstadoEvento(Dato);
        ClaseEstado = ObtenerClaseEstado();
    }

    private string ObtenerEstadoEvento(EventoDeportivo evento)
    {
        var ahora = DateTime.Now;
        var inicio = evento.FechaHoraInicio;
        var fin = inicio.AddHours(evento.DuracionHoras);
        if (ahora < inicio)
            return "Pr칩ximo";
        if (ahora >= inicio && ahora <= fin)
            return "En curso";
        return "Finalizado";
    }

    private string ObtenerClaseEstado()
    {
        switch (EstadoEvento)
        {
            case "Pr칩ximo":
                return "bg-info text-dark";
            case "En curso":
                return "bg-success";
            case "Finalizado":
                return "bg-secondary";
            default:
                return "bg-light";
        }
    }

    private string ObtenerClaseCupoDisponible()
    {
        var cupoDisponible = Dato.CupoDisponible;
        var porcentajeDisponible = (double)cupoDisponible / Dato.CupoMaximo * 100;
        
        if (cupoDisponible <= 0)
            return "bg-danger";
        else if (porcentajeDisponible <= 20)
            return "bg-warning text-dark";
        else if (porcentajeDisponible <= 50)
            return "bg-info text-dark";
        else
            return "bg-success";
    }
}