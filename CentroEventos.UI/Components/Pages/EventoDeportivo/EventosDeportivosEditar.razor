@page "/eventos/{Id:int}"
@rendermode InteractiveServer
@layout MainLayout

@using CentroEventos.UI.Components.Forms

@inject EventoDeportivoObtenerPorIdUseCase ObtenerEventoUseCase
@inject EventoDeportivoActualizarUseCase ActualizarEventoUseCase
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<PageTitle>
    @Titulo
</PageTitle>
<div class="container-md mt-4" style="max-width: 600px;">
    <header class="row justify-content-between align-items-center">
        <h3 class="mb-0 col">@Titulo</h3>
        <a href="/eventos/@Id/reservas" class="btn btn-outline-primary col-auto">
            <span class="oi oi-plus" aria-hidden="true"></span>
            Ver Reservas
        </a>
    </header>
    <main>
        @if (isLoading)
        {
            <p><em>Cargando datos del evento...</em></p>
        }
        else if (loadError)
        {
            <div class="alert alert-danger">@MensajeDeError</div>
            <p><a href="/eventos" class="btn btn-link">Volver a la lista</a></p>
        }
        else if (Evento == null) 
        {
            <p><em>No se encontr√≥ el evento o no se pudo cargar el formulario.</em></p>
            <p><a href="/eventos" class="btn btn-link">Volver a la lista</a></p>
        }
        else
        {
            <EventoDeportivoForm
                UsuarioId="@UserId"
                EventoAEditar="Evento"
                MensajeDeExito="@MensajeDeExito"
                MensajeDeError="@MensajeDeError"
                GuardarCambiosDelegado="Guardar"
                TextoBoton="Guardar Cambios"
            />
        }
    </main>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private EventoDeportivo? Evento { get; set; } = null;
    private bool isLoading = true;
    private bool loadError = false;
    private string? MensajeDeExito;
    private string? MensajeDeError;
    private string Titulo { get; set; } = "Editar Evento Deportivo";
    private int UserId = 0;

    protected override void OnInitialized()
    {
        isLoading = true;
        loadError = false;
        MensajeDeExito = null;
        MensajeDeError = null;
        try
        {
            var customAuthenticationStateProvider = (CustomAuthStateProvider)AuthProvider;
            UserId = customAuthenticationStateProvider.ExtractUserId();
            var evento = ObtenerEventoUseCase.Ejecutar(UserId, Id);
            if (evento != null)
            {
                Evento = evento;
                Titulo = $"Editar: {evento.Nombre}";
            }
            else
            {
                loadError = true;
                MensajeDeError = $"Evento con ID {Id} no encontrado.";
            }
        }
        catch (Exception ex)
        {
            loadError = true;
            MensajeDeError = $"Error al cargar el evento: {ex.Message}";
            Console.WriteLine(MensajeDeError);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private void Guardar(EventoDeportivo EventoAGuardar)
    {
        EventoAGuardar.Id = Id;
        ActualizarEventoUseCase.Ejecutar(UserId, EventoAGuardar);
        MensajeDeExito = "Evento guardado correctamente.";
        MensajeDeError = null;
        Navigation.NavigateTo("/eventos");
    }
}
