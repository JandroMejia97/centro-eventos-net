@page "/eventos/agregar"
@rendermode InteractiveServer
@layout MainLayout

@using CentroEventos.UI.Components.Forms

@inject EventoDeportivoCrearUseCase CrearUseCase
@inject PersonaObtenerTodosUseCase ObtenerPersonasUseCase
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="container-md mt-4" style="max-width: 600px;">
    <header>
        <h4 class="text-center">Creaci√≥n de Evento Deportivo</h4>
    </header>
    <main>
        <EventoDeportivoForm
            UsuarioId="@userId"
            MensajeDeError="@MensajeDeError"
            MensajeDeExito="@MensajeDeExito"
            GuardarCambiosDelegado="Guardar"
        />
    </main>
</div>

@code {
    private string? MensajeDeError { get; set; } = null;
    private string? MensajeDeExito { get; set; } = null;
    private int userId = 0;

    protected override void OnInitialized()
    {
        var customAuthenticationStateProvider = (CustomAuthStateProvider)AuthProvider;
        userId = customAuthenticationStateProvider.ExtractUserId();
    }

    private async Task Guardar(EventoDeportivo evento)
    {
        try
        {
            CrearUseCase.Ejecutar(userId, evento);
            MensajeDeExito = "Evento guardado correctamente.";
            MensajeDeError = null;
            await Task.Run(() => Navigation.NavigateTo("/eventos"));
        }
        catch (Exception ex)
        {
            MensajeDeError = ex.Message;
            MensajeDeExito = null;
        }
        finally
        {
            StateHasChanged();
        }
    }
}
