@page "/eventos/{EventoId:int}/reservas/{PersonaId:int}"

@using CentroEventos.UI.Components.Forms

@inject AuthenticationStateProvider AuthProvider
@inject ReservaActualizarUseCase ActualizarReservaUseCase
@inject ReservaObtenerUseCase ObtenerReservaUseCase
@inject NavigationManager NavigationManager

<PageTitle>
    @Titulo
</PageTitle>

<h3>
    @Titulo
</h3>

@if (Cargando)
{
    <p><em>Cargando datos de la persona...</em></p>
}
else if (ErrorDeCarga)
{
    <div class="alert alert-danger">@MensajeDeError</div>
    <p><a href="/eventos/@EventoId/reservas" class="btn btn-link">Volver a la lista</a></p>
}
else if (ReservaAEditar == null)
{
    <p><em>No se encontró la reserva o no se pudo cargar el formulario.</em></p>
    <p><a href="/eventos/@EventoId/reservas" class="btn btn-link">Volver a la lista</a></p>
}
else
{
    <ReservaForm
        UsuarioId="@UsuarioId"
        GuardarCambios="GuardarReserva"
        SubmitButtonText="Crear Reserva"
        MensajeDeExito="@MensajeDeExito"
        MensajeDeError="@MensajeDeError"
        GuardandoCambios="@Guardando"
    />
    <Snackbar
        Show="@MostrarSnackbar"
        OnClose="@EventCallback.Factory.Create(this, () => MostrarSnackbar = false)"
        Message="Reserva creada con éxito"
    />
}

@code {

    [Parameter]
    public int EventoId { get; set; }
    [Parameter]
    public int PersonaId { get; set; }
    private Reserva? ReservaAEditar { get; set; } = null;
    private string Titulo = "Editar Reserva";
    private string? MensajeDeError;
    private string? MensajeDeExito;
    private bool ErrorDeCarga = false;
    private bool Guardando = false;
    private bool Cargando = true;
    private int UsuarioId = 0;
    private bool MostrarSnackbar = false;

    protected override async Task OnInitializedAsync()
    {
        var customAuthenticationStateProvider = (CustomAuthStateProvider)AuthProvider;
        try
        {
            UsuarioId = await customAuthenticationStateProvider.ExtractUserIdAsync();
            var Reserva = ObtenerReservaUseCase.Ejecutar(UsuarioId, PersonaId, EventoId);
            if (Reserva != null)
            {
                ReservaAEditar = Reserva;
                Titulo = $"Editar Reserva: {Reserva.Persona?.NombreCompleto} para el evento {Reserva.EventoDeportivo?.Nombre}";
            }
            else
            {
                ErrorDeCarga = true;
                MensajeDeError = $"Reserva con ID {PersonaId} no encontrada para el evento {EventoId}.";
            }
        }
        catch (Exception ex)
        {
            ErrorDeCarga = true;
            MensajeDeError = $"Error al cargar la persona: {ex.Message}";
            Console.WriteLine($"Error en OnParametersSetAsync: {ex}");
        }
        finally
        {
            Cargando = false;
        }
    }

    private async Task GuardarReserva(Reserva ReservaAModificar)
    {
        if (Guardando) return;

        Guardando = true;
        MensajeDeExito = null;
        MensajeDeError = null;

        try
        {
            ActualizarReservaUseCase.Ejecutar(
                UsuarioId,
                ReservaAModificar
            );
            MensajeDeExito = "Reserva actualizada con éxito";
            MostrarSnackbar = true;

            await Task.Delay(1_000);
            NavigationManager.NavigateTo($"/eventos/{EventoId}/reservas");
        }
        catch (Exception ex)
        {
            MensajeDeError = $"Error al guardar la reserva: {ex.Message}";
            Console.WriteLine($"Error en GuardarReserva: {ex}");
        }
        finally
        {
            Guardando = false;
            StateHasChanged();
        }
    }
}
