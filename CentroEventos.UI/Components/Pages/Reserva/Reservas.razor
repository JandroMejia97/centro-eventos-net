@page "/eventos/{EventoId:int}/reservas"
@rendermode InteractiveServer
@layout MainLayout

@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.UI.Components.Shared
@using CentroEventos.UI.Components.Pages.Reserva

@inject ReservaObtenerPorEventoUseCase ReservasPorEventoUseCase
@inject EventoDeportivoObtenerPorIdUseCase EventoDeportivoObtenerPorIdUseCase
@inject ReservaEliminarUseCase ReservaEliminarUseCase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<ListLayout 
    TItem="Reserva"
    Titulo="Reservas"
    NombreDeEntidad="Reserva"
    NombreDeEntidades="Reservas"
    @ref="VistaDeListaDeReservas"
    RutaCrearNuevo="@RutaCrearNuevaReserva"
    TextoCrearNuevo="Crear Nueva Reserva"
    CargaDeDatosDelegado="@CargarReservas"
    EliminarDatoDelegado="@EliminarReserva"
    ExtraerNombreDelDato="@(r => r.Persona?.NombreCompleto ?? r.PersonaId.ToString())">
    <CabeceraDeTabla>
        <th>Persona</th>
        <th>Evento</th>
        <th>Fecha de Reserva</th>
        <th>Estado</th>
        <th style="width: 150px;">Acciones</th>
    </CabeceraDeTabla>
    <VistaMovil Context="currentReserva">
        <ReservaTarjeta 
            Dato="currentReserva"
            SolicitarEliminacion="VistaDeListaDeReservas.MostrarConfirmacionDeEliminacion"
        />
    </VistaMovil>
    <FilaDeTabla Context="currentReserva">
        <ReservaFila
            Dato="currentReserva"
            SolicitarEliminacion="VistaDeListaDeReservas.MostrarConfirmacionDeEliminacion"
        />
    </FilaDeTabla>
</ListLayout>

@code {
    private ListLayout<Reserva> VistaDeListaDeReservas = null!;
    [Parameter, Required]
    public int EventoId { get; set; }
    [Parameter, Required]
    public int UsuarioId { get; set; } = 0;
    public string RutaCrearNuevaReserva = string.Empty;

    protected override void OnInitialized()
    {
        var customAuthenticationStateProvider = (CustomAuthStateProvider)AuthenticationStateProvider;
        UsuarioId = customAuthenticationStateProvider.ExtractUserId();
        EventoDeportivo evento = EventoDeportivoObtenerPorIdUseCase.Ejecutar(UsuarioId, EventoId);
        if (evento == null)
        {
            NavigationManager.NavigateTo("/eventos");
            return;
        }
        if (evento.FechaHoraInicio > DateTime.Now)
        {
            RutaCrearNuevaReserva = $"/eventos/{EventoId}/reservas";
        }
    }

    protected IEnumerable<Reserva> CargarReservas()
    {
        return ReservasPorEventoUseCase.Ejecutar(EventoId, UsuarioId);
    }

    private void EliminarReserva(Reserva reservaAEliminar)
    {
        if (reservaAEliminar == null) return;
        ReservaEliminarUseCase.Ejecutar(UsuarioId, reservaAEliminar.PersonaId, reservaAEliminar.EventoDeportivoId);
        if (VistaDeListaDeReservas.Datos == null) return;
        var tempList = VistaDeListaDeReservas.Datos.ToList();
        tempList.RemoveAll(r => r.PersonaId == reservaAEliminar.PersonaId && r.EventoDeportivoId == reservaAEliminar.EventoDeportivoId);
        VistaDeListaDeReservas.Datos = tempList;
    }
}
