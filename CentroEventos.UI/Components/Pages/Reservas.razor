@page "/reservas"
@using CentroEventos.Core;
@using CentroEventos.Core.UseCases;
@inject ReservaObtenerTodosUseCase ReservaObtenerTodosUseCase
@inject ReservaEliminarUseCase ReservaEliminarUseCase
@inject NavigationManager NavigationManager

<PageTitle>Reservas</PageTitle>

<h1>Reservas</h1>

<p>
    <button class="btn btn-primary" @onclick="CrearNuevaReserva">Crear nueva reserva</button>
</p>

@if (loading)
{
    <p><em>Cargando...</em></p>
}
else if (error)
{
    <p class="text-danger"><em>@errorMessage</em></p>
}
else if (reservas == null || !reservas.Any())
{
    <p><em>No hay reservas disponibles.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Evento</th>
                <th>Persona</th>
                <th>Fecha de Reserva</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reserva in reservas)
            {
                <tr>
                    <td>@reserva.Id</td>
                    <td>@(reserva.EventoDeportivo?.Nombre ?? reserva.EventoDeportivoId.ToString())</td>
                    <td>@(reserva.Persona?.NombreCompleto ?? reserva.PersonaId.ToString())</td>
                    <td>@reserva.FechaReserva.ToShortDateString()</td>
                    <td>@reserva.EstadoReserva</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => VerReserva(reserva.Id)">Ver</button>
                        @* <button class="btn btn-sm btn-warning" @onclick="() => EditarReserva(reserva.Id)">Editar</button> *@
                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(reserva)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showDeleteDialog)
{
    <div class="modal fade show" style="display:block" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirmar Eliminación</h5>
                    <button type="button" class="close" @onclick="CloseDeleteConfirmation" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar la reserva para el evento "<strong>@(reservaToDelete?.EventoDeportivo?.Nombre ?? reservaToDelete?.EventoDeportivoId.ToString())</strong>" realizada por "<strong>@(reservaToDelete?.Persona?.NombreCompleto ?? reservaToDelete?.PersonaId.ToString())</strong>"?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmation">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteReservaConfirmed">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private IEnumerable<Reserva>? reservas;
    private bool loading = true;
    private bool error = false;
    private string errorMessage = "Ocurrió un error al procesar su solicitud."; // Default error message

    private bool showDeleteDialog = false;
    private Reserva? reservaToDelete;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        error = false;
        try
        {
            // Ensure EventoDeportivo and Persona are loaded if needed for display
            // This might require a specific method in the UseCase or separate fetches
            // For now, assuming ExecuteAsync loads them or they are handled by null checks
            reservas = await ReservaObtenerTodosUseCase.ExecuteAsync();
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Ocurrió un error al cargar las reservas: {ex.Message}. Por favor, intente de nuevo más tarde.";
            Console.WriteLine(errorMessage); // Log to console for debugging
        }
        finally
        {
            loading = false;
        }
    }

    private void CrearNuevaReserva()
    {
        NavigationManager.NavigateTo("/reservas/agregar");
    }

    private void VerReserva(int reservaId)
    {
        // NavigationManager.NavigateTo($"/reservas/detalles/{reservaId}"); // Example
        Console.WriteLine($"Ver detalles de reserva ID: {reservaId}"); // Placeholder
    }

    // private void EditarReserva(int reservaId)
    // {
    //     NavigationManager.NavigateTo($"/reservas/editar/{reservaId}"); // Example
    //     Console.WriteLine($"Editar reserva ID: {reservaId}"); // Placeholder
    // }

    private void ShowDeleteConfirmation(Reserva reserva)
    {
        reservaToDelete = reserva;
        showDeleteDialog = true;
        errorMessage = string.Empty; // Clear previous errors before showing dialog
    }

    private void CloseDeleteConfirmation()
    {
        showDeleteDialog = false;
        reservaToDelete = null;
    }

    private async Task DeleteReservaConfirmed()
    {
        if (reservaToDelete == null) return;

        loading = true;
        error = false;
        try
        {
            // Ensure reservaToDelete has PersonaId and EventoDeportivoId properties.
            // These should be populated when fetching the list of reservations.
            // Hardcoded usuarioId: 1 as per requirement.
            await ReservaEliminarUseCase.ExecuteAsync(
                usuarioId: 1, // Hardcoded as per requirement
                personaId: reservaToDelete.PersonaId,
                eventoDeportivoId: reservaToDelete.EventoDeportivoId
            );
            // Refresh data by re-fetching.
            reservas = await ReservaObtenerTodosUseCase.ExecuteAsync();
            // Consider a less disruptive update if only one item is removed and list is large:
            // var tempList = reservas?.ToList();
            // tempList?.RemoveAll(r => r.Id == reservaToDelete.Id);
            // reservas = tempList;
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Error al eliminar la reserva: {ex.Message}. Por favor, intente de nuevo.";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            loading = false;
            CloseDeleteConfirmation(); // Hide dialog
            StateHasChanged(); // Crucial for Blazor to update the UI after async operations
        }
    }
}
