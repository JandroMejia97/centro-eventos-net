@page "/login"
@layout AuthLayout

@rendermode InteractiveServer

@using CentroEventos.Aplicacion.Servicios

@inject UsuarioLoginUseCase LoginUseCase
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IServicioCacheDePermisos PermisosCache

@using CentroEventos.UI.Components.Shared

<h4 class="text-center mb-4">Iniciar sesión</h4>
<EditForm Model="loginModel" OnValidSubmit="OnLogin" FormName="LoginUsuarioForm">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email" class="form-label">Correo electrónico</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Contraseña</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Cargando...</span>
        }
        else
        {
            <span>Iniciar sesión</span>
        }
    </button>
    <div class="text-center mt-3">
        <a href="/registro">¿No tienes cuenta? Regístrate</a>
    </div>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
</EditForm>
<Snackbar 
    Message="¡Inicio de sesión exitoso!"
    Duration="2000"
    Show="@showSnackbar"
    OnClose="@EventCallback.Factory.Create(this, () => showSnackbar = false)"/>

@code {
    private LoginModel loginModel = new();
    private string? error;
    private bool showSnackbar = false;
    private bool isLoading = false;

    private async Task OnLogin()
    {
        error = null;
        isLoading = true;
        try
        {
            var usuario = LoginUseCase.Ejecutar(loginModel.Email, loginModel.Password);
            if (usuario != null)
            {
                showSnackbar = true;
                var customAuthenticationStateProvider = (CustomAuthStateProvider)AuthProvider;
                Persona persona = usuario.Persona;
                var token = await customAuthenticationStateProvider.MarkUserAsAuthenticated(persona.Id, persona.Email, persona, usuario.Permisos);
                PermisosCache.Agregar(persona.Id, usuario.Permisos);
                string path = $"/postlogin?Token={token}";
                Navigation.NavigateTo(path);
            }
            else
            {
                error = "Credenciales inválidas.";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El correo es obligatorio.")]
        [EmailAddress(ErrorMessage = "El correo no tiene un formato válido.")]
        public string Email { get; set; } = string.Empty;
        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Password { get; set; } = string.Empty;
    }
}
