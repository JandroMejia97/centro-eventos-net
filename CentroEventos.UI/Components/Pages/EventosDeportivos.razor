@page "/eventos"
@rendermode InteractiveServer
@layout MainLayout

@using CentroEventos.UI.Components.Shared

@inject EventoDeportivoObtenerTodosUseCase ObtenerEventos
@inject EventoDeportivoEliminarUseCase EliminarEventoUseCase

<PageTitle>Eventos Deportivos</PageTitle>
<div class="d-flex justify-content-between align-items-center my-4">
    <h3 class="mb-0 text-center">Eventos Deportivos</h3>
    <a class="btn btn-success" href="/eventos/agregar">
        <span class="bi bi-calendar-plus-fill"></span> Crear nuevo evento
    </a>
</div>

<ConfirmDialog 
    @ref="confirmDialog"
    Title="Eliminar Evento"
    CancelText="No, cancelar"
    ConfirmText="Sí, eliminar"
    OnConfirm="OnConfirmDelete"
    ConfirmButtonClass="btn-danger"
    Message="¿Estás seguro de que deseas eliminar este evento?"
/>
<Snackbar
    Duration="2000"
    Show="@showSnackbar"
    CssClass="bg-danger text-white"
    OnClose="@(() => showSnackbar = false)"
    Message="¡Evento eliminado exitosamente!"
/>
<Snackbar 
    Duration="3000"
    Message="@error"
    Title="¡Ocurrió un error!"
    OnClose="@(() => error = null)"
    CssClass="bg-danger text-white"
    Show="@(!string.IsNullOrEmpty(error))" 
/>


@if (eventos is null)
{
    <div class="text-center"><div class="spinner-border" role="status"></div></div>
}
else if (!eventos.Any())
{
    <div class="alert alert-info text-center">No hay eventos deportivos registrados.</div>
}
else
{
    <div class="row d-lg-none">
        @foreach (var e in eventos)
        {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@e.Nombre</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@e.FechaHoraInicio.ToString("g")</h6>
                        <p class="card-text flex-grow-1">@e.Descripcion</p>
                        <ul class="list-unstyled mb-2">
                            <li><strong>Duración:</strong> @e.DuracionHoras h</li>
                            <li><strong>Cupo máximo:</strong> @e.CupoMaximo</li>
                            <li><strong>ID Responsable:</strong> @e.ResponsableId</li>
                        </ul>
                        <div class="d-flex gap-2 mt-auto">
                            <a class="btn btn-outline-primary btn-sm" href="/eventos/@e.Id">Ver</a>
                            <a class="btn btn-outline-secondary btn-sm" href="/eventos/editar/@e.Id">Editar</a>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => OnDelete(e)">Eliminar</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="d-none d-lg-block mt-4">
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Fecha y Hora</th>
                    <th>Duración (h)</th>
                    <th>Cupo</th>
                    <th>Responsable</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in eventos)
                {
                    <tr>
                        <td>@e.Nombre</td>
                        <td>@e.Descripcion</td>
                        <td>@e.FechaHoraInicio.ToString("g")</td>
                        <td>@e.DuracionHoras</td>
                        <td>@e.CupoMaximo</td>
                        <td>@e.ResponsableId</td>
                        <td class="d-flex gap-2">
                            <a class="btn btn-outline-primary" href="/eventos/@e.Id">Ver</a>
                            <a class="btn btn-outline-secondary" href="/eventos/editar/@e.Id">Editar</a>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => OnDelete(e)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<EventoDeportivo>? eventos;

    private EventoDeportivo eventoSeleccionado = null!;

    private ConfirmDialog confirmDialog = null!;

    private string? error;

    private bool showSnackbar = false;

    protected override void OnInitialized()
    {
        eventos = ObtenerEventos.Ejecutar().ToList();
    }

    private void OnDelete(EventoDeportivo evento)
    {
        eventoSeleccionado = evento;
        confirmDialog.Show();
    }

    private void OnConfirmDelete()
    {
        if (eventoSeleccionado != null)
        {
            try
            {
                EliminarEventoUseCase.Ejecutar(eventoSeleccionado.Id, 1);
                eventos.Remove(eventoSeleccionado);
                eventoSeleccionado = null;
                showSnackbar = true;
            }
            catch (Exception ex)
            {
                // Manejo de errores, por ejemplo, mostrar un mensaje al usuario
                error = $"Error al eliminar el evento: {ex.Message}";
            }
        }
    }
}
