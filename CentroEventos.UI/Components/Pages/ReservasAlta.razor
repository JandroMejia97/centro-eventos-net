@page "/reservas/alta"
@layout AuthLayout

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using CentroEventos.Aplicacion.CasosDeUso
@using Microsoft.AspNetCore.Components.Forms
@inject ReservaAltaUseCase AltaUseCase
@inject NavigationManager Navigation

<h4 class="text-center mb-4">Alta de Reserva</h4>

<EditForm Model="reservaModel" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">ID de Persona</label>
        <InputNumber class="form-control" @bind-Value="reservaModel.PersonaId" />
        <ValidationMessage For="@(() => reservaModel.PersonaId)" />
    </div>

    <div class="mb-3">
        <label class="form-label">ID de Evento Deportivo</label>
        <InputNumber class="form-control" @bind-Value="reservaModel.EventoDeportivoId" />
        <ValidationMessage For="@(() => reservaModel.EventoDeportivoId)" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Guardar Reserva</button>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-success mt-3">@mensaje</div>
    }
</EditForm>

@code {
    private ReservaModel reservaModel = new();
    private string? error;
    private string? mensaje;

    private async Task Guardar()
    {
        try
        {
            var reserva = new Reserva(
                reservaModel.PersonaId,
                reservaModel.EventoDeportivoId
            );

            @* AltaUseCase.Ejecutar(1, reservaModel.PersonaId, reservaModel.EventoDeportivoId); *@
            mensaje = "Reserva creada correctamente.";
            reservaModel = new(); // limpiar formulario
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            mensaje = null;
        }
    }

    public class ReservaModel
    {
        [Required(ErrorMessage = "El ID de Persona es obligatorio.")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe ser un ID válido.")]
        public int PersonaId { get; set; }

        [Required(ErrorMessage = "El ID de Evento Deportivo es obligatorio.")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe ser un ID válido.")]
        public int EventoDeportivoId { get; set; }
    }
}
