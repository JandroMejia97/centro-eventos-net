@page "/personas/editar/{Id:int}"
@using CentroEventos.Core
@using CentroEventos.Core.UseCases
@using CentroEventos.UI.Components.Forms // Required for PersonaForm.PersonaFormModel
@inject PersonaObtenerPorIdUseCase PersonaObtenerPorIdUseCase
@inject PersonaActualizarUseCase PersonaActualizarUseCase
@inject NavigationManager NavigationManager

<PageTitle>Editar Persona</PageTitle>

<h3>Editar Persona</h3>

@if (isLoading)
{
    <p><em>Cargando datos de la persona...</em></p>
}
else if (loadError)
{
    <div class="alert alert-danger">@errorMessage</div>
    <p><a href="/personas" class="btn btn-link">Volver a la lista</a></p>
}
else if (personaModel == null) // Should be covered by isLoading or loadError initially
{
    <p><em>No se encontró la persona o no se pudo cargar el formulario.</em></p>
     <p><a href="/personas" class="btn btn-link">Volver a la lista</a></p>
}
else
{
    <PersonaForm PersonaToEdit="personaModel"
                 OnSubmitCallback="GuardarCambios"
                 SuccessMessage="@successMessage"
                 ErrorMessage="@errorMessage"
                 SubmitButtonText="Guardar Cambios" />
}

@code {
    [Parameter]
    public int Id { get; set; }

    private PersonaForm.PersonaFormModel? personaModel;
    // private Persona? originalPersona; // Store original if needed for specific logic

    private bool isLoading = true;
    private bool loadError = false;
    private string? successMessage;
    private string? errorMessage;
    private bool isSaving = false;

    protected override async Task OnParametersSetAsync()
    {
        // Reset states on parameter change (e.g., navigating from one edit page to another)
        isLoading = true;
        loadError = false;
        successMessage = null;
        errorMessage = null;
        personaModel = null;

        try
        {
            var persona = await PersonaObtenerPorIdUseCase.ExecuteAsync(Id);
            if (persona != null)
            {
                // originalPersona = persona;
                personaModel = new PersonaForm.PersonaFormModel
                {
                    Id = persona.Id,
                    DNI = persona.CI, // Assuming CI from Persona entity maps to DNI in form model
                    Nombre = persona.Nombre,
                    Apellido = persona.Apellido,
                    Email = persona.Email,
                    Telefono = persona.Telefono
                    // Map FechaNacimiento if it were part of PersonaFormModel
                    // FechaNacimiento = persona.FechaNacimiento
                };
            }
            else
            {
                loadError = true;
                errorMessage = $"Persona con ID {Id} no encontrada.";
            }
        }
        catch (Exception ex)
        {
            loadError = true;
            errorMessage = $"Error al cargar la persona: {ex.Message}";
            Console.WriteLine($"Error en OnParametersSetAsync: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GuardarCambios(PersonaForm.PersonaFormModel submittedModel)
    {
        if (isSaving || submittedModel == null) return;

        isSaving = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            // Map PersonaFormModel back to a Persona entity or a DTO expected by the use case
            // Assuming PersonaActualizarUseCase expects a Persona entity.
            // If it expects a DTO, create that DTO here.
            var personaActualizada = new Persona
            {
                Id = submittedModel.Id, // Crucial for update
                CI = submittedModel.DNI,
                Nombre = submittedModel.Nombre,
                Apellido = submittedModel.Apellido,
                Email = submittedModel.Email,
                Telefono = submittedModel.Telefono,
                // Ensure all required fields for Persona entity are mapped
                // For example, if FechaNacimiento is part of Persona but not form, retrieve from originalPersona or handle default
                // FechaNacimiento = originalPersona?.FechaNacimiento ?? default(DateTime),
                // Rol and ContrasenaHash would typically not be updated here unless specifically intended.
                // Rol = originalPersona?.Rol ?? string.Empty,
                // ContrasenaHash = originalPersona?.ContrasenaHash ?? string.Empty
            };

            // It's crucial that 'personaActualizada' has all the fields that the use case might validate or save,
            // even if they weren't editable on this specific form.
            // This might involve fetching the originalPersona again if not stored, or making sure originalPersona is available.
            // For simplicity here, assuming direct mapping is sufficient or use case handles partial updates.

            await PersonaActualizarUseCase.ExecuteAsync(persona: personaActualizada, usuarioId: 1); // Hardcoded usuarioId
            successMessage = "Cambios guardados con éxito. Redirigiendo...";

            await Task.Delay(2000); // Wait for message visibility
            NavigationManager.NavigateTo("/personas");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar los cambios: {ex.Message}";
            Console.WriteLine($"Error en GuardarCambios: {ex}");
        }
        finally
        {
            isSaving = false;
            // StateHasChanged(); // PersonaForm might trigger this with message updates
        }
    }
}
