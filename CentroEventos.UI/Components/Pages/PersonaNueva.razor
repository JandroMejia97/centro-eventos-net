@page "/personas/nueva"
@layout AuthLayout

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject PersonaCrearUseCase CrearUseCase
@inject NavigationManager Navigation

<h4 class="text-center mb-4">Alta de Persona</h4>

<EditForm Model="personaModel" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="personaModel.Nombre" />
        <ValidationMessage For="@(() => personaModel.Nombre)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Apellido</label>
        <InputText class="form-control" @bind-Value="personaModel.Apellido" />
        <ValidationMessage For="@(() => personaModel.Apellido)" />
    </div>

    <div class="mb-3">
        <label class="form-label">DNI</label>
        <InputText class="form-control" @bind-Value="personaModel.DNI" />
        <ValidationMessage For="@(() => personaModel.DNI)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="personaModel.Email" />
        <ValidationMessage For="@(() => personaModel.Email)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Teléfono</label>
        <InputText class="form-control" @bind-Value="personaModel.Telefono" />
        <ValidationMessage For="@(() => personaModel.Telefono)" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Guardar Persona</button>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-success mt-3">@mensaje</div>
    }
</EditForm>

@code {
    private PersonaModel personaModel = new();
    private string? error;
    private string? mensaje;

    private async Task Guardar()
    {
        try
        {
            var persona = new Persona(
                personaModel.Nombre,
                personaModel.Apellido,
                personaModel.DNI,
                personaModel.Email,
                personaModel.Telefono
            );

            CrearUseCase.Ejecutar(persona, "usuario");
            mensaje = "Persona registrada correctamente.";
            Navigation.NavigateTo("/personas");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    // Define PersonaModel if it does not exist elsewhere
    public class PersonaModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; } = string.Empty;

        [Required(ErrorMessage = "El DNI es obligatorio")]
        public string DNI { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "El email no es válido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "El teléfono es obligatorio")]
        public string Telefono { get; set; } = string.Empty;
    }
}
