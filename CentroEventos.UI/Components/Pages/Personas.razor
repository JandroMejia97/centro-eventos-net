@page "/personas"
@using CentroEventos.Core
@using CentroEventos.Core.UseCases
@inject PersonaObtenerTodosUseCase PersonaObtenerTodosUseCase
@inject PersonaEliminarUseCase PersonaEliminarUseCase
@inject NavigationManager NavigationManager

<PageTitle>Personas</PageTitle>

<h1>Personas</h1>

<p>
    <button class="btn btn-primary" @onclick="RegistrarNuevaPersona">Registrar Nueva Persona</button>
</p>

@if (loading && personas == null)
{
    <p><em>Cargando personas...</em></p>
}
else if (error)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (personas == null || !personas.Any())
{
    <p><em>No hay personas registradas.</em></p>
    @if (loading)
    {
        <p><em>Actualizando...</em></p>
    }
}
else
{
    if (loading)
    {
        <p><em>Actualizando lista de personas...</em></p>
    }
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre Completo</th>
                <th>CI</th>
                <th>Email</th>
                <th>Fecha de Nacimiento</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in personas)
            {
                <tr>
                    <td>@persona.Id</td>
                    <td>@persona.NombreCompleto</td>
                    <td>@persona.CI</td>
                    <td>@persona.Email</td>
                    <td>@persona.FechaNacimiento.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => VerPersona(persona.Id)" title="Ver Detalles">Ver</button>
                        <button class="btn btn-sm btn-warning" @onclick="() => EditarPersona(persona.Id)" title="Editar Persona">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(persona)" title="Eliminar Persona">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showDeleteDialog)
{
    <div class="modal fade show" style="display:block" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirmation" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar a la persona "<strong>@(personaToDelete?.NombreCompleto)</strong>" (CI: @personaToDelete?.CI)? Esta acción no se puede deshacer.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmation">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeletePersonaConfirmed" disabled="@isDeleting">
                        @if(isDeleting) { <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> }
                        Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private IEnumerable<Persona>? personas;
    private bool loading = true;
    private bool isDeleting = false;
    private bool error = false;
    private string errorMessage = "Ocurrió un error al procesar su solicitud.";

    private bool showDeleteDialog = false;
    private Persona? personaToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadPersonas();
    }

    private async Task LoadPersonas()
    {
        loading = true;
        error = false;
        try
        {
            personas = await PersonaObtenerTodosUseCase.ExecuteAsync();
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Ocurrió un error al cargar la lista de personas: {ex.Message}. Por favor, intente recargar la página.";
            Console.WriteLine($"Error en LoadPersonas: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    private void RegistrarNuevaPersona()
    {
        NavigationManager.NavigateTo("/usuario/registro");
    }

    private void VerPersona(int personaId)
    {
        Console.WriteLine($"Ver detalles de persona ID: {personaId}");
    }

    private void EditarPersona(int personaId)
    {
        NavigationManager.NavigateTo($"/personas/editar/{personaId}");
    }

    private void ShowDeleteConfirmation(Persona persona)
    {
        personaToDelete = persona;
        showDeleteDialog = true;
        errorMessage = string.Empty;
    }

    private void CloseDeleteConfirmation()
    {
        showDeleteDialog = false;
        personaToDelete = null;
    }

    private async Task DeletePersonaConfirmed()
    {
        if (personaToDelete == null) return;

        isDeleting = true;

        try
        {
            await PersonaEliminarUseCase.ExecuteAsync(personaId: personaToDelete.Id, usuarioId: 1); // Hardcoded usuarioId: 1
            await LoadPersonas();
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Error al eliminar la persona \"{personaToDelete.NombreCompleto}\": {ex.Message}.";
            Console.WriteLine($"Error en DeletePersonaConfirmed: {ex}");
        }
        finally
        {
            isDeleting = false;
            CloseDeleteConfirmation();
            StateHasChanged();
        }
    }
}
