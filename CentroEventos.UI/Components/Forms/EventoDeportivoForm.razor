@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@inject AuthenticationStateProvider AuthProvider
@inject EventoDeportivoObtenerPorIdUseCase ObtenerPorIdUseCase
@inject UsuarioObtenerTodosUseCase ObtenerUsuariosUseCase

<SuccessErrorSnackbars
    MensajeDeExito="@MensajeDeExito"
/>
<EditForm Model="EventoDeportivo" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText
            class="form-control"
            disabled="@EventoPasado"
            @bind-Value="EventoDeportivo.Nombre"
        />
        <ValidationMessage For="@(() => EventoDeportivo.Nombre)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Descripción</label>
        <InputText
            class="form-control"
            disabled="@EventoPasado"
            @bind-Value="EventoDeportivo.Descripcion"
        />
        <ValidationMessage For="@(() => EventoDeportivo.Descripcion)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Duración (horas)</label>
        <InputNumber
            TValue="double"
            class="form-control"
            disabled="@EventoPasado"
            @bind-Value="EventoDeportivo.DuracionHoras"
        />
        <ValidationMessage For="@(() => EventoDeportivo.DuracionHoras)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha y hora de inicio</label>
        <InputDate
            Min="@MinFecha"
            EnableMinMax="true"
            class="form-control"
            disabled="@EventoPasado"
            Type="InputDateType.DateTimeLocal"
            @bind-Value="EventoDeportivo.FechaHoraInicio"
        />
        <ValidationMessage For="@(() => EventoDeportivo.FechaHoraInicio)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Cupo máximo</label>
        <InputNumber
            TValue="int"
            class="form-control"
            disabled="@EventoPasado"
            @bind-Value="EventoDeportivo.CupoMaximo"
        />
        <ValidationMessage For="@(() => EventoDeportivo.CupoMaximo)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Responsable</label>
        <InputSelect
            id="responsable"
            class="form-select"
            disabled="@(EventoPasado || Responsables.Any() == false)"
            @bind-Value="EventoDeportivo.ResponsableId"
        >
            <option value="">Seleccione un responsable</option>
            @foreach (var usuario in Responsables)
            {
                <option value="@usuario.PersonaId">@usuario.Persona.NombreCompleto</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => EventoDeportivo.ResponsableId)" />
    </div>

    <button type="submit" disabled="@EventoPasado" class="btn btn-primary w-100">@TextoBoton</button>

    @if (!string.IsNullOrEmpty(MensajeDeError))
    {
        <div class="alert alert-danger mt-3">@MensajeDeError</div>
    }
</EditForm>
@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string TextoBoton { get; set; } = "Guardar Evento";
    [Parameter] public EventoDeportivo? EventoAEditar { get; set; } = null;
    [Parameter] public EventoDeportivoDto EventoDeportivo { get; set; } = new();
    [Parameter] public EventCallback<EventoDeportivo> GuardarCambiosDelegado { get; set; } = default!;
    [Parameter] public string? MensajeDeError { get; set; } = null;
    [Parameter] public string? MensajeDeExito { get; set; } = null;
    [Parameter] public int UsuarioId { get; set; } = 0;
    private bool EventoPasado = false;
    private IEnumerable<Usuario> Responsables = Enumerable.Empty<Usuario>();
    private DateTime MinFecha = DateTime.Now;

    protected override void OnInitialized()
    {
        try
        {
            Responsables = ObtenerUsuariosUseCase.Ejecutar(UsuarioId);
            if (Responsables.Count() == 1)
                EventoDeportivo.ResponsableId = Responsables.First().PersonaId;
            if (EventoAEditar is null) return;
            EventoPasado = EventoAEditar.FechaHoraInicio < DateTime.Now;
            if (EventoPasado) {
                MensajeDeError = "No se pueden editar eventos pasados.";
            }
            EventoDeportivo = new EventoDeportivoDto
            {
                Nombre = EventoAEditar.Nombre,
                Descripcion = EventoAEditar.Descripcion,
                DuracionHoras = EventoAEditar.DuracionHoras,
                FechaHoraInicio = EventoAEditar.FechaHoraInicio,
                CupoMaximo = EventoAEditar.CupoMaximo,
                ResponsableId = EventoAEditar.ResponsableId
            };
        }
        catch (Exception ex)
        {
            MensajeDeError = $"Error al obtener el evento: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (EventoDeportivo.FechaHoraInicio < DateTime.Now)
            {
                MensajeDeError = "La fecha y hora de inicio no puede ser en el pasado.";
                MensajeDeExito = null;
                return;
            }

            var evento = new EventoDeportivo(
                EventoDeportivo.Nombre,
                EventoDeportivo.Descripcion,
                EventoDeportivo.FechaHoraInicio,
                EventoDeportivo.DuracionHoras,
                EventoDeportivo.CupoMaximo,
                EventoDeportivo.ResponsableId
            );

            await GuardarCambiosDelegado.InvokeAsync(evento);
        }
        catch (Exception ex)
        {
            MensajeDeError = ex.Message;
            MensajeDeExito = null;
        }
    }

    public class EventoDeportivoDto
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "La descripción es obligatoria.")]
        public string Descripcion { get; set; } = string.Empty;

        [Required(ErrorMessage = "Duración obligatoria.")]
        [Range(1, 100, ErrorMessage = "Debe ser entre 1 y 100 horas.")]
        public double DuracionHoras { get; set; }

        [Required(ErrorMessage = "Fecha y hora de inicio son obligatorias.")]
        public DateTime FechaHoraInicio { get; set; } = DateTime.Now;

        [Required(ErrorMessage = "El cupo es obligatorio.")]
        [Range(1, 9999, ErrorMessage = "El cupo debe ser un número entre 1 y 9999.")]
        public int CupoMaximo { get; set; }

        [Required(ErrorMessage = "Responsable obligatorio.")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar un responsable válido.")]
        public int ResponsableId { get; set; }
    }
}
