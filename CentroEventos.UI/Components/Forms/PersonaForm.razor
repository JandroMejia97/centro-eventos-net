@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using CentroEventos.Aplicacion.Enums

<SuccessErrorSnackbars
    MensajeDeExito="@MensajeDeExito"
/>

<EditForm Model="PersonaModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    @if (!string.IsNullOrEmpty(MensajeDeError))
    {
        <div class="alert alert-danger mt-3" role="alert">@MensajeDeError</div>
    }

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre</label>
        <InputText id="nombre" class="form-control" @bind-Value="PersonaModel.Nombre" />
        <ValidationMessage For="@(() => PersonaModel.Nombre)" />
    </div>
    <div class="mb-3">
        <label for="apellido" class="form-label">Apellido</label>
        <InputText id="apellido" class="form-control" @bind-Value="PersonaModel.Apellido" />
        <ValidationMessage For="@(() => PersonaModel.Apellido)" />
    </div>
    <div class="mb-3">
        <label for="dni" class="form-label">DNI</label>
        <InputText id="dni" class="form-control" @bind-Value="PersonaModel.DNI" />
        <ValidationMessage For="@(() => PersonaModel.DNI)" />
    </div>
    <div class="mb-3">
        <label for="telefono" class="form-label">Teléfono</label>
        <InputText id="telefono" class="form-control" @bind-Value="PersonaModel.Telefono" />
        <ValidationMessage For="@(() => PersonaModel.Telefono)" />
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Correo electrónico</label>
        <InputText id="email" class="form-control" @bind-Value="PersonaModel.Email" />
        <ValidationMessage For="@(() => PersonaModel.Email)" />
    </div>
    @if (PermitirCambiarContraseña)
    {
        <div class="mb-3">
            <label for="password" class="form-label">Contraseña</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="PersonaModel.Password" />
            <ValidationMessage For="@(() => PersonaModel.Password)" />
        </div>
    }
    @if (PermitirCambiarPermisos)
    {
        <div class="mb-3">
            <label for="permisos" class="form-label">Permisos:</label>
            <select 
                id="permisos"
                multiple="true"
                class="form-select"
                @onchange="CambiosEnPermisos"
            >
                @foreach (var permiso in Enum.GetValues(typeof(Permiso)).Cast<Permiso>())
                {
                    <option value="@permiso" selected="@PersonaModel.Permisos.Contains(permiso)">
                        @permiso.ToString()
                    </option>
                }
            </select>
            <ValidationMessage For="@(() => PersonaModel.Permisos)" />
        </div>
    }

    <button type="submit" disabled="@GuardandoCambios" class="btn btn-primary w-100">
        @if (GuardandoCambios)
        {
            <span class="spinner-border spinner-border-sm mx-2" role="status" aria-hidden="true"></span>
        }
        @TextoBoton
    </button>
</EditForm>

@code {
    [Parameter]
    public Usuario? PersonaAEditar { get; set; }
    [Parameter]
    public EventCallback<Usuario> GuardarCambiosDelegado { get; set; }
    [Parameter]
    public string? MensajeDeExito { get; set; }
    [Parameter]
    public string? MensajeDeError { get; set; }
    [Parameter]
    public string TextoBoton { get; set; } = "Guardar Cambios";
    [Parameter]
    public bool PermitirCambiarPermisos { get; set; } = false;
    [Parameter]
    public bool PermitirCambiarContraseña { get; set; } = true;
    [Parameter]
    public bool GuardandoCambios { get; set; } = false;
    public PersonaDto PersonaModel { get; set; } = new();

    protected override void OnInitialized()
    {
        Inicializar();
    }

    private async Task HandleValidSubmit()
    {
        GuardandoCambios = true;
        Persona PersonaAGuardar = new Persona(
            PersonaModel.DNI,
            PersonaModel.Nombre,
            PersonaModel.Apellido,
            PersonaModel.Email,
            PersonaModel.Telefono
        );
        try {
            Usuario usuario;
            if (PersonaAEditar == null || string.IsNullOrEmpty(PersonaModel.Password) == false)
            {
                usuario = new Usuario(PersonaAGuardar, PersonaModel.Password);
            }
            else
            {
                usuario = new Usuario(PersonaAGuardar);
            }
            usuario.PermisosUsuarios = PersonaModel.Permisos
                .Select(p => new PermisoUsuario(p, usuario))
                .ToList();
            await GuardarCambiosDelegado.InvokeAsync(usuario);
        }
        catch (Exception ex)
        {
            MensajeDeError = ex.Message;
        }
        finally
        {
            GuardandoCambios = false;
        }
    }

    protected void Inicializar()
    {
        HashSet<Permiso> permisosPorDefecto = new()
        {
            Permiso.VerEventos,
            Permiso.VerReservas,
            Permiso.VerPersonas
        };
        if (PersonaAEditar != null)
        {
            PersonaModel = new PersonaDto
            {
                Nombre = PersonaAEditar.Persona.Nombre,
                Apellido = PersonaAEditar.Persona.Apellido,
                DNI = PersonaAEditar.Persona.DNI,
                Email = PersonaAEditar.Persona.Email,
                Telefono = PersonaAEditar.Persona.Telefono,
                Password = string.Empty,
                Permisos = PersonaAEditar.Permisos?.ToHashSet() ?? permisosPorDefecto
            };
            PersonaModel.Password = string.Empty;
        }
        else
        {
            PersonaModel = new PersonaDto();
            PersonaModel.Permisos = permisosPorDefecto;
        }
    }

    private void CambiosEnPermisos(ChangeEventArgs e)
    {
        var permisos = e.Value as IEnumerable<string>;
        var enumPermisos = permisos?
            .Select(p => Enum.TryParse<Permiso>(p, out var permiso) ? permiso : (Permiso?)null)
            .Where(p => p.HasValue)
            .Select(p => p!.Value);
        PersonaModel.Permisos = enumPermisos?.ToHashSet() ?? new HashSet<Permiso>();
    }

    public class PersonaDto : IValidatableObject
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        [StringLength(100, ErrorMessage = "El nombre no puede exceder los 100 caracteres.")]
        public string Nombre { get; set; } = string.Empty;
        [Required(ErrorMessage = "El apellido es obligatorio.")]
        [StringLength(100, ErrorMessage = "El apellido no puede exceder los 100 caracteres.")]
        public string Apellido { get; set; } = string.Empty;
        [Required(ErrorMessage = "El DNI es obligatorio.")]
        [StringLength(9, ErrorMessage = "El DNI no puede exceder los 9 caracteres.")]
        [RegularExpression(@"^\d{6,9}$", ErrorMessage = "El formato del DNI no es válido.")]
        public string DNI { get; set; } = string.Empty;
        [Required(ErrorMessage = "El correo electrónico es obligatorio.")]
        [EmailAddress(ErrorMessage = "El correo electrónico no es válido.")]
        public string Email { get; set; } = string.Empty;
        [Required(ErrorMessage = "El teléfono es obligatorio.")]
        [Phone(ErrorMessage = "El formato del teléfono no es válido.")]
        [StringLength(20, ErrorMessage = "El teléfono no puede exceder los 20 caracteres.")]
        [RegularExpression(@"^\+?[0-9\s]+$", ErrorMessage = "El teléfono solo puede contener números y espacios.")]
        public string Telefono { get; set; } = string.Empty;
        [StringLength(100, ErrorMessage = "La contraseña no puede exceder los 100 caracteres.")]
        public string Password { get; set; } = string.Empty;
        [Required(ErrorMessage = "Los permisos son obligatorios.")]
        [MinLength(1, ErrorMessage = "Debe seleccionar al menos un permiso.")]
        public HashSet<Permiso> Permisos { get; set; } = new HashSet<Permiso>();

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var personaForm = validationContext.GetService(typeof(PersonaForm)) as PersonaForm;
            if (personaForm != null && personaForm.PersonaAEditar == null)
            {
                if (string.IsNullOrWhiteSpace(Password))
                {
                    yield return new ValidationResult("La contraseña es obligatoria.", new[] { nameof(Password) });
                }
            }
            if (!string.IsNullOrEmpty(Password) && Password.Length < 8)
            {
                yield return new ValidationResult("La contraseña debe tener al menos 8 caracteres.", new[] { nameof(Password) });
            }
        }
    }
}
