@using System.ComponentModel.DataAnnotations
@using CentroEventos.Core // Assuming Persona entity might be referenced or similar structures

<EditForm Model="PersonaToEdit" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="alert alert-success" role="alert">@SuccessMessage</div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">@ErrorMessage</div>
    }
    <ValidationSummary class="text-danger" />

    @if (PersonaToEdit != null)
    {
        @* Id is usually not shown in an edit form, but is part of the model *@
        @* <InputNumber @bind-Value="PersonaToEdit.Id" style="display:none;" /> *@

        <div class="mb-3">
            <label for="dni" class="form-label">DNI/CI:</label>
            <InputText id="dni" class="form-control" @bind-Value="PersonaToEdit.DNI" />
            <ValidationMessage For="@(() => PersonaToEdit.DNI)" />
        </div>

        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="PersonaToEdit.Nombre" />
            <ValidationMessage For="@(() => PersonaToEdit.Nombre)" />
        </div>

        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido:</label>
            <InputText id="apellido" class="form-control" @bind-Value="PersonaToEdit.Apellido" />
            <ValidationMessage For="@(() => PersonaToEdit.Apellido)" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="PersonaToEdit.Email" />
            <ValidationMessage For="@(() => PersonaToEdit.Email)" />
        </div>

        <div class="mb-3">
            <label for="telefono" class="form-label">Teléfono:</label>
            <InputText id="telefono" class="form-control" @bind-Value="PersonaToEdit.Telefono" />
            <ValidationMessage For="@(() => PersonaToEdit.Telefono)" />
        </div>

        <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
    }
    else
    {
        <p><em>Cargando datos de la persona...</em></p>
    }

</EditForm>

@code {
    public class PersonaFormModel
    {
        public int Id { get; set; } // Needed for identifying the persona to update

        [Required(ErrorMessage = "El DNI/CI es obligatorio.")]
        [StringLength(20, ErrorMessage = "El DNI/CI no puede exceder los 20 caracteres.")]
        public string DNI { get; set; } = string.Empty;

        [Required(ErrorMessage = "El nombre es obligatorio.")]
        [StringLength(100, ErrorMessage = "El nombre no puede exceder los 100 caracteres.")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es obligatorio.")]
        [StringLength(100, ErrorMessage = "El apellido no puede exceder los 100 caracteres.")]
        public string Apellido { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es obligatorio.")]
        [EmailAddress(ErrorMessage = "El formato del email no es válido.")]
        [StringLength(150, ErrorMessage = "El email no puede exceder los 150 caracteres.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "El teléfono es obligatorio.")]
        [Phone(ErrorMessage = "El formato del teléfono no es válido.")] // Basic phone validation
        [StringLength(20, ErrorMessage = "El teléfono no puede exceder los 20 caracteres.")]
        public string Telefono { get; set; } = string.Empty;

        // Consider adding FechaNacimiento if it's editable
        // public DateTime FechaNacimiento { get; set; } = DateTime.Today;
    }

    [Parameter, EditorRequired]
    public PersonaFormModel PersonaToEdit { get; set; } = null!; // Initialized by parent

    [Parameter]
    public EventCallback<PersonaFormModel> OnSubmitCallback { get; set; }

    [Parameter]
    public string? SuccessMessage { get; set; }

    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public string SubmitButtonText { get; set; } = "Guardar Cambios";

    // IsEditMode is implicitly true for this form's purpose.
    // If specific behavior dependent on this flag is needed later, it can be added.
    // [Parameter]
    // public bool IsEditMode { get; set; } = true;

    private async Task HandleValidSubmit()
    {
        if (PersonaToEdit != null)
        {
            await OnSubmitCallback.InvokeAsync(PersonaToEdit);
        }
    }

    protected override void OnParametersSet()
    {
        // This ensures that if a null PersonaToEdit is passed, the form doesn't throw null refs immediately.
        // The parent component (PersonasEditar.razor) will be responsible for fetching
        // and assigning the actual Persona data to this parameter.
        if (PersonaToEdit == null)
        {
            // Optionally, initialize with a new model to prevent null issues in template,
            // but it's better if parent ensures it's not null when form is meant to be active.
            // PersonaToEdit = new PersonaFormModel(); // Or handle as an error/loading state
        }
    }
}
