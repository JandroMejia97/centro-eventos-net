@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using CentroEventos.Aplicacion.Entidades


@inject EventoDeportivoObtenerProximosUseCase ObtenerProximosEventosUseCase
@inject EventoDeportivoObtenerPorIdUseCase ObtenerEventoPorIdUseCase
@inject PersonaObtenerTodosUseCase ObtenerPersonasUseCase
@inject PersonaObtenerPorIdUseCase ObtenerPersonaPorIdUseCase

<SuccessErrorSnackbars MensajeDeExito="@MensajeDeExito" />

<EditForm Model="ReservaModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    @if (!string.IsNullOrEmpty(MensajeDeError))
    {
        <div class="alert alert-danger mt-3">@MensajeDeError</div>
    }

    <div class="mb-3 ()">
        <label for="evento" class="form-label">Evento Deportivo</label>
        <InputSelect
            id="evento"
            class="form-select"
            @bind-Value="ReservaModel.EventoDeportivoId"
            disabled="@(EventoId > 0 || ReservaAEditar != null || !EventosDeportivos.Any())"
        >
            <option value="0">-- Seleccione un Evento --</option>
            @foreach (var evento in EventosDeportivos)
            {
                <option value="@evento.Id">@evento.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => ReservaModel.EventoDeportivoId)" />
    </div>

    <div class="mb-3">
        <label for="persona" class="form-label">Persona</label>
        <InputSelect
            id="persona"
            class="form-select"
            @bind-Value="ReservaModel.PersonaId"
            disabled="@(PersonaId > 0 || ReservaAEditar != null || !Personas.Any())"
        >
            <option value="0">-- Seleccione una Persona --</option>
            @foreach (var persona in Personas)
            {
                <option value="@persona.Id">@persona.NombreCompleto</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => ReservaModel.PersonaId)" />
    </div>

    @if (ReservaAEditar != null)
    {
        <div class="mb-3">
            <label for="estadoAsistencia" class="form-label">Estado de Asistencia</label>
            <InputSelect id="estadoAsistencia" class="form-select" @bind-Value="ReservaModel.EstadoAsistencia">
                @foreach (var estado in Enum.GetValues(typeof(EstadoAsistencia)).Cast<EstadoAsistencia>())
                {
                    <option value="@estado">@estado.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ReservaModel.EstadoAsistencia)" />
        </div>
        <div class="mb-3">
            <label for="fechaReserva" class="form-label">Fecha de Reserva</label>
            <InputDate id="fechaReserva" class="form-control" disabled="true" @bind-Value="ReservaModel.FechaReserva" />
            <ValidationMessage For="@(() => ReservaModel.FechaReserva)" />
        </div>
    }

    <button type="submit" class="btn btn-primary w-100" disabled="@GuardandoCambios">
        @if (GuardandoCambios)
        {
            <span class="spinner-border spinner-border-sm mx-2" role="status" aria-hidden="true"></span>
        }
        @TextoBoton
    </button>
</EditForm>

@code {
    [Parameter] public int EventoId { get; set; }
    [Parameter] public int PersonaId { get; set; }
    [Parameter] public Reserva? ReservaAEditar { get; set; }
    [Parameter] public EventCallback<Reserva> GuardarCambios { get; set; }
    [Parameter] public string? MensajeDeExito { get; set; }
    [Parameter] public string? MensajeDeError { get; set; }
    [Parameter] public string TextoBoton { get; set; } = "Guardar";
    [Parameter, Required] public int UsuarioId { get; set; }
    [Parameter] public bool GuardandoCambios { get; set; } = false;
    public ReservaDto ReservaModel { get; set; } = new();
    public IEnumerable<EventoDeportivo> EventosDeportivos { get; set; } = Enumerable.Empty<EventoDeportivo>();
    public IEnumerable<Persona> Personas { get; set; } = Enumerable.Empty<Persona>();

    protected override void OnInitialized()
    {
        try
        {
            MensajeDeError = string.Empty;
            InicializarDatos();
        }
        catch (Exception ex)
        {
            MensajeDeError = $"Error al cargar los datos: {ex.Message}";
        }
        finally
        {
        }
    }
    private void InicializarDatos()
    {
        ReservaModel = new ReservaDto(ReservaAEditar);
        InicializarListaDeEventos();
        InicializarListaDePersonas();
        if (EventosDeportivos == null || !EventosDeportivos.Any())
        {
            MensajeDeError = "No hay eventos deportivos disponibles.";
        }
        if (string.IsNullOrEmpty(MensajeDeError) && (Personas == null || !Personas.Any()))
        {
            MensajeDeError = "No hay personas disponibles.";
        }
    }

    private void InicializarListaDePersonas()
    {
        if (ReservaAEditar != null && ReservaAEditar?.Persona is not null)
        {
            Personas = new List<Persona> { ReservaAEditar.Persona };
        }
        else if (PersonaId > 0)
        {
            Persona Persona = ObtenerPersonaPorIdUseCase.Ejecutar(UsuarioId, PersonaId);
            if (Persona == null)
            {
                MensajeDeError = "La persona seleccionada no existe o no está disponible.";
                return;
            }
            Personas = new List<Persona> { Persona };
        }
        else 
        {
            Personas = ObtenerPersonasUseCase.Ejecutar(UsuarioId);
        }

        if (Personas != null && Personas.Count() == 1)
        {
            ReservaModel.PersonaId = Personas.First().Id;
        }
    }

    private void InicializarListaDeEventos()
    {
        if (ReservaAEditar != null && ReservaAEditar?.EventoDeportivo is not null)
        {
            EventosDeportivos = new List<EventoDeportivo> { ReservaAEditar.EventoDeportivo };
        }
        else if (EventoId > 0)
        {
            EventoDeportivo Evento = ObtenerEventoPorIdUseCase.Ejecutar(UsuarioId, EventoId);
            if (Evento == null)
            {
                MensajeDeError = "El evento deportivo seleccionado no existe o no está disponible.";
                return;
            }
            EventosDeportivos = new List<EventoDeportivo> { Evento };
        }
        else 
        {
            EventosDeportivos = ObtenerProximosEventosUseCase.Ejecutar(UsuarioId, null);
        }

        if (EventosDeportivos != null && EventosDeportivos.Count() == 1)
        {
            ReservaModel.EventoDeportivoId = EventosDeportivos.First().Id;
        }
        
    }

    private async Task HandleValidSubmit()
    {
        if (ReservaModel.EventoDeportivoId == 0 || ReservaModel.PersonaId == 0)
        {
            MensajeDeError = "Por favor, seleccione un evento y una persona.";
            return;
        }
        Reserva ReservaAGuardar = new Reserva
        {
            PersonaId = ReservaModel.PersonaId,
            EventoDeportivoId = ReservaModel.EventoDeportivoId,
            FechaAltaReserva = ReservaModel.FechaReserva,
            EstadoAsistencia = ReservaModel.EstadoAsistencia
        };
        await GuardarCambios.InvokeAsync(ReservaAGuardar);
    }

    private bool IsSubmitDisabled()
    {
        return (EventosDeportivos == null || !EventosDeportivos.Any()) ||
               (Personas == null || !Personas.Any());
    }

    public class ReservaDto
    {
        [Required(ErrorMessage = "Debe seleccionar una persona.")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar una persona válida.")]
        public int PersonaId { get; set; }

        [Required(ErrorMessage = "Debe seleccionar un evento deportivo.")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe seleccionar un evento deportivo válido.")]
        public int EventoDeportivoId { get; set; }

        [Required(ErrorMessage = "La fecha de reserva es obligatoria.")]
        [DataType(DataType.DateTime, ErrorMessage = "La fecha de reserva debe ser una fecha y hora válida.")]
        public DateTime FechaReserva { get; set; } = DateTime.Now;

        [Required(ErrorMessage = "El estado de asistencia es obligatorio.")]
        [EnumDataType(typeof(EstadoAsistencia), ErrorMessage = "El estado de asistencia debe ser válido.")]
        [Display(Name = "Estado de Asistencia")]
        public EstadoAsistencia EstadoAsistencia { get; set; } = EstadoAsistencia.Pendiente;

        public ReservaDto() { }
        public ReservaDto(Reserva? reserva)
        {
            if (reserva != null)
            {
                PersonaId = reserva.PersonaId;
                EventoDeportivoId = reserva.EventoDeportivoId;
                FechaReserva = reserva.FechaAltaReserva;
                EstadoAsistencia = reserva.EstadoAsistencia;
            }
        }
    }
}
